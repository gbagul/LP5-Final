#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
public:
    int V;
    vector<vector<int>> adj;

    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // undirected graph
    }

    void parallelDFS(int start) {
        vector<bool> visited(V, false);
        stack<int> s;

        s.push(start);
        visited[start] = true;

        #pragma omp parallel
        {
            while (!s.empty()) {
                int node;

                #pragma omp critical
                {
                    if (!s.empty()) {
                        node = s.top();
                        s.pop();
                    } else {
                        node = -1;
                    }
                }

                if (node == -1) continue;

                #pragma omp critical
                {
                    cout << "Visited " << node << " by thread " << omp_get_thread_num() << endl;
                }

                // Parallelize neighbor traversal
                #pragma omp parallel for
                for (int i = 0; i < adj[node].size(); ++i) {
                    int neighbor = adj[node][i];

                    if (!visited[neighbor]) {
                        bool expected = false;
                        #pragma omp critical
                        {
                            if (!visited[neighbor]) {
                                visited[neighbor] = true;
                                s.push(neighbor);
                            }
                        }
                    }
                }
            }
        }
    }
};

int main() {
    Graph g(8);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);
    g.addEdge(6, 7);

    cout << "Parallel DFS starting from node 0:\n";
    g.parallelDFS(0);

    return 0;
}



#to run program
g++ -fopenmp -o output_file input_file.cpp

